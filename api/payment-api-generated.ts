/* tslint:disable */
/* eslint-disable */
/*
Klarna Payments API V1

The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).

**Note:** Examples provided in this section includes full payloads, including all supported fields , required and optionals. In order to implement a best in class request we recommend you don't include customer details when initiating a payment session. Refer to [Initiate a payment](https://docs.klarna.com/klarna-payments/integrate-with-klarna-payments/step-1-initiate-a-payment/) section for further details.

Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Address } from '../models';
// @ts-ignore
import { Attachment } from '../models';
// @ts-ignore
import { CreateOrderRequest } from '../models';
// @ts-ignore
import { Customer } from '../models';
// @ts-ignore
import { CustomerTokenCreationRequest } from '../models';
// @ts-ignore
import { CustomerTokenCreationResponse } from '../models';
// @ts-ignore
import { ErrorV2 } from '../models';
// @ts-ignore
import { MerchantSession } from '../models';
// @ts-ignore
import { MerchantUrls } from '../models';
// @ts-ignore
import { Options } from '../models';
// @ts-ignore
import { Order } from '../models';
// @ts-ignore
import { OrderLine } from '../models';
// @ts-ignore
import { PaymentMethodCategory } from '../models';
// @ts-ignore
import { Session } from '../models';
// @ts-ignore
import { SessionCreate } from '../models';
// @ts-ignore
import { SessionRead } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PaymentApi - axios parameter creator
 * @export
 */
export const PaymentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this API call to cancel/release an authorization. If the `authorization_token` received during a Klarna Payments won’t be used to place an order immediately you could release the authorization. Read more on **[Cancel an existing authorization](https://docs.klarna.com/klarna-payments/other-actions/cancel-an-authorization/)**.
         * @summary Cancel an authorization
         * @param {string} authorizationToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelAuthorization: async (authorizationToken: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorizationToken' is not null or undefined
            assertParamExists('cancelAuthorization', 'authorizationToken', authorizationToken)
            const localVarPath = `/payments/v1/authorizations/{authorizationToken}`
                .replace(`{${"authorizationToken"}}`, encodeURIComponent(String(authorizationToken !== undefined ? authorizationToken : `-authorizationToken-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/payments/v1/authorizations/{authorizationToken}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API call to create a new order. Placing an order towards Klarna means that the Klarna Payments session will be closed and that an order will be created in Klarna\'s system.<br/>When you have received the `authorization_token` for a successful authorization you can place the order. Among the other order details in this request, you include a URL to the confirmation page for the customer.<br/>When the Order has been successfully placed at Klarna, you need to handle it either through the Merchant Portal or using [Klarna’s Order Management API](https://docs.klarna.com/api/payments/). Read more on **[Create a new order](https://docs.klarna.com/klarna-payments/integrate-with-klarna-payments/step-3-create-an-order/)**.
         * @summary Create an order
         * @param {string} authorizationToken 
         * @param {CreateOrderRequest} [createOrderRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder: async (authorizationToken: string, createOrderRequest?: CreateOrderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorizationToken' is not null or undefined
            assertParamExists('createOrder', 'authorizationToken', authorizationToken)
            const localVarPath = `/payments/v1/authorizations/{authorizationToken}/order`
                .replace(`{${"authorizationToken"}}`, encodeURIComponent(String(authorizationToken !== undefined ? authorizationToken : `-authorizationToken-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createOrderRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/payments/v1/authorizations/{authorizationToken}/order',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createOrderRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API call to create a Klarna Payments session.<br/>When a session is created you will receive the available `payment_method_categories` for the session, a `session_id` and a `client_token`. The `session_id` can be used to read or update the session using the REST API. The `client_token` should be passed to the browser. Read more on **[Create a new payment session](https://docs.klarna.com/klarna-payments/integrate-with-klarna-payments/step-1-initiate-a-payment/)**.
         * @summary Create a session
         * @param {SessionCreate} sessionCreate session_request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession: async (sessionCreate: SessionCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionCreate' is not null or undefined
            assertParamExists('createSession', 'sessionCreate', sessionCreate)
            const localVarPath = `/payments/v1/sessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: sessionCreate,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/payments/v1/sessions',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(sessionCreate, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API call to create a Klarna Customer Token.<br/>After having obtained an `authorization_token` for a successful authorization, this can be used to create a purchase token instead of placing the order. Creating a Klarna Customer Token results in Klarna storing customer and payment method details. Read more on **[Generate a consumer token](https://docs.klarna.com/klarna-payments/in-depth-knowledge/customer-token/)**.
         * @summary Generate a consumer token
         * @param {string} authorizationToken 
         * @param {CustomerTokenCreationRequest} [customerTokenCreationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateCustomerToken: async (authorizationToken: string, customerTokenCreationRequest?: CustomerTokenCreationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorizationToken' is not null or undefined
            assertParamExists('generateCustomerToken', 'authorizationToken', authorizationToken)
            const localVarPath = `/payments/v1/authorizations/{authorizationToken}/customer-token`
                .replace(`{${"authorizationToken"}}`, encodeURIComponent(String(authorizationToken !== undefined ? authorizationToken : `-authorizationToken-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: customerTokenCreationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/payments/v1/authorizations/{authorizationToken}/customer-token',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(customerTokenCreationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API call to get a Klarna Payments session. You can read the Klarna Payments session at any time after it has been created, to get information about it. This will return all data that has been collected during the session. Read more on **[Read an existing payment session](https://docs.klarna.com/klarna-payments/other-actions/check-the-details-of-a-payment-session/)**.
         * @summary Get details about a session
         * @param {string} sessionId session_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionDetails: async (sessionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('getSessionDetails', 'sessionId', sessionId)
            const localVarPath = `/payments/v1/sessions/{session_id}`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId !== undefined ? sessionId : `-session_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/payments/v1/sessions/{session_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API call to update a Klarna Payments session with new details, in case something in the order has changed and the checkout has been reloaded. Including if the consumer adds a new item to the cart or if consumer details are updated. Read more on **[Update an existing payment session](https://docs.klarna.com/klarna-payments/other-actions/update-the-cart/)**.
         * @summary Update a session
         * @param {string} sessionId session_id
         * @param {Session} session session_request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSessionDetails: async (sessionId: string, session: Session, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('updateSessionDetails', 'sessionId', sessionId)
            // verify required parameter 'session' is not null or undefined
            assertParamExists('updateSessionDetails', 'session', session)
            const localVarPath = `/payments/v1/sessions/{session_id}`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId !== undefined ? sessionId : `-session_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: session,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/payments/v1/sessions/{session_id}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(session, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentApi - functional programming interface
 * @export
 */
export const PaymentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this API call to cancel/release an authorization. If the `authorization_token` received during a Klarna Payments won’t be used to place an order immediately you could release the authorization. Read more on **[Cancel an existing authorization](https://docs.klarna.com/klarna-payments/other-actions/cancel-an-authorization/)**.
         * @summary Cancel an authorization
         * @param {PaymentApiCancelAuthorizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelAuthorization(requestParameters: PaymentApiCancelAuthorizationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelAuthorization(requestParameters.authorizationToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API call to create a new order. Placing an order towards Klarna means that the Klarna Payments session will be closed and that an order will be created in Klarna\'s system.<br/>When you have received the `authorization_token` for a successful authorization you can place the order. Among the other order details in this request, you include a URL to the confirmation page for the customer.<br/>When the Order has been successfully placed at Klarna, you need to handle it either through the Merchant Portal or using [Klarna’s Order Management API](https://docs.klarna.com/api/payments/). Read more on **[Create a new order](https://docs.klarna.com/klarna-payments/integrate-with-klarna-payments/step-3-create-an-order/)**.
         * @summary Create an order
         * @param {PaymentApiCreateOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrder(requestParameters: PaymentApiCreateOrderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const createOrderRequest: CreateOrderRequest = {
                authorization_token: requestParameters.authorization_token,
                auto_capture: requestParameters.auto_capture,
                billing_address: requestParameters.billing_address,
                custom_payment_method_ids: requestParameters.custom_payment_method_ids,
                customer: requestParameters.customer,
                locale: requestParameters.locale,
                merchant_data: requestParameters.merchant_data,
                merchant_reference1: requestParameters.merchant_reference1,
                merchant_reference2: requestParameters.merchant_reference2,
                merchant_urls: requestParameters.merchant_urls,
                order_amount: requestParameters.order_amount,
                order_lines: requestParameters.order_lines,
                order_tax_amount: requestParameters.order_tax_amount,
                payment_method_categories: requestParameters.payment_method_categories,
                purchase_country: requestParameters.purchase_country,
                purchase_currency: requestParameters.purchase_currency,
                shipping_address: requestParameters.shipping_address,
                status: requestParameters.status
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrder(requestParameters.authorizationToken, createOrderRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API call to create a Klarna Payments session.<br/>When a session is created you will receive the available `payment_method_categories` for the session, a `session_id` and a `client_token`. The `session_id` can be used to read or update the session using the REST API. The `client_token` should be passed to the browser. Read more on **[Create a new payment session](https://docs.klarna.com/klarna-payments/integrate-with-klarna-payments/step-1-initiate-a-payment/)**.
         * @summary Create a session
         * @param {PaymentApiCreateSessionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSession(requestParameters: PaymentApiCreateSessionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MerchantSession>> {
            const sessionCreate: SessionCreate = {
                acquiring_channel: requestParameters.acquiring_channel,
                attachment: requestParameters.attachment,
                authorization_token: requestParameters.authorization_token,
                billing_address: requestParameters.billing_address,
                client_token: requestParameters.client_token,
                custom_payment_method_ids: requestParameters.custom_payment_method_ids,
                customer: requestParameters.customer,
                design: requestParameters.design,
                expires_at: requestParameters.expires_at,
                locale: requestParameters.locale,
                merchant_data: requestParameters.merchant_data,
                merchant_reference1: requestParameters.merchant_reference1,
                merchant_reference2: requestParameters.merchant_reference2,
                merchant_urls: requestParameters.merchant_urls,
                options: requestParameters.options,
                order_amount: requestParameters.order_amount,
                order_lines: requestParameters.order_lines,
                order_tax_amount: requestParameters.order_tax_amount,
                payment_method_categories: requestParameters.payment_method_categories,
                purchase_country: requestParameters.purchase_country,
                purchase_currency: requestParameters.purchase_currency,
                shipping_address: requestParameters.shipping_address,
                status: requestParameters.status,
                intent: requestParameters.intent
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSession(sessionCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API call to create a Klarna Customer Token.<br/>After having obtained an `authorization_token` for a successful authorization, this can be used to create a purchase token instead of placing the order. Creating a Klarna Customer Token results in Klarna storing customer and payment method details. Read more on **[Generate a consumer token](https://docs.klarna.com/klarna-payments/in-depth-knowledge/customer-token/)**.
         * @summary Generate a consumer token
         * @param {PaymentApiGenerateCustomerTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateCustomerToken(requestParameters: PaymentApiGenerateCustomerTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerTokenCreationResponse>> {
            const customerTokenCreationRequest: CustomerTokenCreationRequest = {
                description: requestParameters.description,
                billing_address: requestParameters.billing_address,
                customer: requestParameters.customer,
                intended_use: requestParameters.intended_use,
                locale: requestParameters.locale,
                purchase_country: requestParameters.purchase_country,
                purchase_currency: requestParameters.purchase_currency
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateCustomerToken(requestParameters.authorizationToken, customerTokenCreationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API call to get a Klarna Payments session. You can read the Klarna Payments session at any time after it has been created, to get information about it. This will return all data that has been collected during the session. Read more on **[Read an existing payment session](https://docs.klarna.com/klarna-payments/other-actions/check-the-details-of-a-payment-session/)**.
         * @summary Get details about a session
         * @param {PaymentApiGetSessionDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSessionDetails(requestParameters: PaymentApiGetSessionDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSessionDetails(requestParameters.sessionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API call to update a Klarna Payments session with new details, in case something in the order has changed and the checkout has been reloaded. Including if the consumer adds a new item to the cart or if consumer details are updated. Read more on **[Update an existing payment session](https://docs.klarna.com/klarna-payments/other-actions/update-the-cart/)**.
         * @summary Update a session
         * @param {PaymentApiUpdateSessionDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSessionDetails(requestParameters: PaymentApiUpdateSessionDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const session: Session = {
                acquiring_channel: requestParameters.acquiring_channel,
                attachment: requestParameters.attachment,
                authorization_token: requestParameters.authorization_token,
                billing_address: requestParameters.billing_address,
                client_token: requestParameters.client_token,
                custom_payment_method_ids: requestParameters.custom_payment_method_ids,
                customer: requestParameters.customer,
                design: requestParameters.design,
                expires_at: requestParameters.expires_at,
                locale: requestParameters.locale,
                merchant_data: requestParameters.merchant_data,
                merchant_reference1: requestParameters.merchant_reference1,
                merchant_reference2: requestParameters.merchant_reference2,
                merchant_urls: requestParameters.merchant_urls,
                options: requestParameters.options,
                order_amount: requestParameters.order_amount,
                order_lines: requestParameters.order_lines,
                order_tax_amount: requestParameters.order_tax_amount,
                payment_method_categories: requestParameters.payment_method_categories,
                purchase_country: requestParameters.purchase_country,
                purchase_currency: requestParameters.purchase_currency,
                shipping_address: requestParameters.shipping_address,
                status: requestParameters.status,
                intent: requestParameters.intent
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSessionDetails(requestParameters.sessionId, session, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PaymentApi - factory interface
 * @export
 */
export const PaymentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentApiFp(configuration)
    return {
        /**
         * Use this API call to cancel/release an authorization. If the `authorization_token` received during a Klarna Payments won’t be used to place an order immediately you could release the authorization. Read more on **[Cancel an existing authorization](https://docs.klarna.com/klarna-payments/other-actions/cancel-an-authorization/)**.
         * @summary Cancel an authorization
         * @param {PaymentApiCancelAuthorizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelAuthorization(requestParameters: PaymentApiCancelAuthorizationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cancelAuthorization(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API call to create a new order. Placing an order towards Klarna means that the Klarna Payments session will be closed and that an order will be created in Klarna\'s system.<br/>When you have received the `authorization_token` for a successful authorization you can place the order. Among the other order details in this request, you include a URL to the confirmation page for the customer.<br/>When the Order has been successfully placed at Klarna, you need to handle it either through the Merchant Portal or using [Klarna’s Order Management API](https://docs.klarna.com/api/payments/). Read more on **[Create a new order](https://docs.klarna.com/klarna-payments/integrate-with-klarna-payments/step-3-create-an-order/)**.
         * @summary Create an order
         * @param {PaymentApiCreateOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder(requestParameters: PaymentApiCreateOrderRequest, options?: AxiosRequestConfig): AxiosPromise<Order> {
            return localVarFp.createOrder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API call to create a Klarna Payments session.<br/>When a session is created you will receive the available `payment_method_categories` for the session, a `session_id` and a `client_token`. The `session_id` can be used to read or update the session using the REST API. The `client_token` should be passed to the browser. Read more on **[Create a new payment session](https://docs.klarna.com/klarna-payments/integrate-with-klarna-payments/step-1-initiate-a-payment/)**.
         * @summary Create a session
         * @param {PaymentApiCreateSessionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession(requestParameters: PaymentApiCreateSessionRequest, options?: AxiosRequestConfig): AxiosPromise<MerchantSession> {
            return localVarFp.createSession(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API call to create a Klarna Customer Token.<br/>After having obtained an `authorization_token` for a successful authorization, this can be used to create a purchase token instead of placing the order. Creating a Klarna Customer Token results in Klarna storing customer and payment method details. Read more on **[Generate a consumer token](https://docs.klarna.com/klarna-payments/in-depth-knowledge/customer-token/)**.
         * @summary Generate a consumer token
         * @param {PaymentApiGenerateCustomerTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateCustomerToken(requestParameters: PaymentApiGenerateCustomerTokenRequest, options?: AxiosRequestConfig): AxiosPromise<CustomerTokenCreationResponse> {
            return localVarFp.generateCustomerToken(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API call to get a Klarna Payments session. You can read the Klarna Payments session at any time after it has been created, to get information about it. This will return all data that has been collected during the session. Read more on **[Read an existing payment session](https://docs.klarna.com/klarna-payments/other-actions/check-the-details-of-a-payment-session/)**.
         * @summary Get details about a session
         * @param {PaymentApiGetSessionDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionDetails(requestParameters: PaymentApiGetSessionDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<SessionRead> {
            return localVarFp.getSessionDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API call to update a Klarna Payments session with new details, in case something in the order has changed and the checkout has been reloaded. Including if the consumer adds a new item to the cart or if consumer details are updated. Read more on **[Update an existing payment session](https://docs.klarna.com/klarna-payments/other-actions/update-the-cart/)**.
         * @summary Update a session
         * @param {PaymentApiUpdateSessionDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSessionDetails(requestParameters: PaymentApiUpdateSessionDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateSessionDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelAuthorization operation in PaymentApi.
 * @export
 * @interface PaymentApiCancelAuthorizationRequest
 */
export type PaymentApiCancelAuthorizationRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PaymentApiCancelAuthorization
    */
    readonly authorizationToken: string
    
}

/**
 * Request parameters for createOrder operation in PaymentApi.
 * @export
 * @interface PaymentApiCreateOrderRequest
 */
export type PaymentApiCreateOrderRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PaymentApiCreateOrder
    */
    readonly authorizationToken: string
    
} & CreateOrderRequest

/**
 * Request parameters for createSession operation in PaymentApi.
 * @export
 * @interface PaymentApiCreateSessionRequest
 */
export type PaymentApiCreateSessionRequest = {
    
} & SessionCreate

/**
 * Request parameters for generateCustomerToken operation in PaymentApi.
 * @export
 * @interface PaymentApiGenerateCustomerTokenRequest
 */
export type PaymentApiGenerateCustomerTokenRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PaymentApiGenerateCustomerToken
    */
    readonly authorizationToken: string
    
} & CustomerTokenCreationRequest

/**
 * Request parameters for getSessionDetails operation in PaymentApi.
 * @export
 * @interface PaymentApiGetSessionDetailsRequest
 */
export type PaymentApiGetSessionDetailsRequest = {
    
    /**
    * session_id
    * @type {string}
    * @memberof PaymentApiGetSessionDetails
    */
    readonly sessionId: string
    
}

/**
 * Request parameters for updateSessionDetails operation in PaymentApi.
 * @export
 * @interface PaymentApiUpdateSessionDetailsRequest
 */
export type PaymentApiUpdateSessionDetailsRequest = {
    
    /**
    * session_id
    * @type {string}
    * @memberof PaymentApiUpdateSessionDetails
    */
    readonly sessionId: string
    
} & Session

/**
 * PaymentApiGenerated - object-oriented interface
 * @export
 * @class PaymentApiGenerated
 * @extends {BaseAPI}
 */
export class PaymentApiGenerated extends BaseAPI {
    /**
     * Use this API call to cancel/release an authorization. If the `authorization_token` received during a Klarna Payments won’t be used to place an order immediately you could release the authorization. Read more on **[Cancel an existing authorization](https://docs.klarna.com/klarna-payments/other-actions/cancel-an-authorization/)**.
     * @summary Cancel an authorization
     * @param {PaymentApiCancelAuthorizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiGenerated
     */
    public cancelAuthorization(requestParameters: PaymentApiCancelAuthorizationRequest, options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).cancelAuthorization(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API call to create a new order. Placing an order towards Klarna means that the Klarna Payments session will be closed and that an order will be created in Klarna\'s system.<br/>When you have received the `authorization_token` for a successful authorization you can place the order. Among the other order details in this request, you include a URL to the confirmation page for the customer.<br/>When the Order has been successfully placed at Klarna, you need to handle it either through the Merchant Portal or using [Klarna’s Order Management API](https://docs.klarna.com/api/payments/). Read more on **[Create a new order](https://docs.klarna.com/klarna-payments/integrate-with-klarna-payments/step-3-create-an-order/)**.
     * @summary Create an order
     * @param {PaymentApiCreateOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiGenerated
     */
    public createOrder(requestParameters: PaymentApiCreateOrderRequest, options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).createOrder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API call to create a Klarna Payments session.<br/>When a session is created you will receive the available `payment_method_categories` for the session, a `session_id` and a `client_token`. The `session_id` can be used to read or update the session using the REST API. The `client_token` should be passed to the browser. Read more on **[Create a new payment session](https://docs.klarna.com/klarna-payments/integrate-with-klarna-payments/step-1-initiate-a-payment/)**.
     * @summary Create a session
     * @param {PaymentApiCreateSessionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiGenerated
     */
    public createSession(requestParameters: PaymentApiCreateSessionRequest, options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).createSession(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API call to create a Klarna Customer Token.<br/>After having obtained an `authorization_token` for a successful authorization, this can be used to create a purchase token instead of placing the order. Creating a Klarna Customer Token results in Klarna storing customer and payment method details. Read more on **[Generate a consumer token](https://docs.klarna.com/klarna-payments/in-depth-knowledge/customer-token/)**.
     * @summary Generate a consumer token
     * @param {PaymentApiGenerateCustomerTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiGenerated
     */
    public generateCustomerToken(requestParameters: PaymentApiGenerateCustomerTokenRequest, options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).generateCustomerToken(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API call to get a Klarna Payments session. You can read the Klarna Payments session at any time after it has been created, to get information about it. This will return all data that has been collected during the session. Read more on **[Read an existing payment session](https://docs.klarna.com/klarna-payments/other-actions/check-the-details-of-a-payment-session/)**.
     * @summary Get details about a session
     * @param {PaymentApiGetSessionDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiGenerated
     */
    public getSessionDetails(requestParameters: PaymentApiGetSessionDetailsRequest, options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).getSessionDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API call to update a Klarna Payments session with new details, in case something in the order has changed and the checkout has been reloaded. Including if the consumer adds a new item to the cart or if consumer details are updated. Read more on **[Update an existing payment session](https://docs.klarna.com/klarna-payments/other-actions/update-the-cart/)**.
     * @summary Update a session
     * @param {PaymentApiUpdateSessionDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiGenerated
     */
    public updateSessionDetails(requestParameters: PaymentApiUpdateSessionDetailsRequest, options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).updateSessionDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
